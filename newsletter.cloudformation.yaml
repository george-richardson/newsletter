AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ArtifactPath:
    Type: String
    Description: Path of lambda artifact in ArtifactBucket.
  ArtifactBucket:
    Type: String
    Description: Name of the S3 bucket which contains lambda artifacts.
  DomainName:
    Type: String
    Description: DNS name for use by the newsletter system.
  CertificateARN:
    Type: String
    Description: ARN of a certificate in us-east-1 to be used by API Gateway.
  HostedZoneID:
    Type: String
    Description: ID of the hosted zone to use for domain validation
  Name:
    Type: String
    Description: Used to differentiate multiple installations.
    Default: "newsletter"

Resources: 
  # DYNAMO
  SubscriptionsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: "email"
          AttributeType: "S"
        - AttributeName: "list"
          AttributeType: "S"
        - AttributeName: "verified"
          AttributeType: "S"
        - AttributeName: "verification_token"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "email"
          KeyType: "HASH"
        - AttributeName: "list"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: list-verified
          KeySchema:
          - AttributeName: "list"
            KeyType: "HASH"
          - AttributeName: "verified"
            KeyType: "RANGE"
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: verification-token
          KeySchema: 
            - AttributeName: "verification_token"
              KeyType: "HASH"
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: email
          KeySchema: 
            - AttributeName: "email"
              KeyType: "HASH"
            - AttributeName: "list"
              KeyType: "RANGE"
          Projection:
            ProjectionType: KEYS_ONLY
  ListsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: "name"
          AttributeType: "S"
        - AttributeName: "domain"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "name"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: domain
          KeySchema:
          - AttributeName: "domain"
            KeyType: "HASH"
          Projection:
            ProjectionType: ALL

  # Lambda Role
  FrontendLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt [SubscriptionsTable, Arn]
                  - !Sub "${SubscriptionsTable.Arn}/*"
                  - !GetAtt [ListsTable, Arn]
                  - !Sub "${ListsTable.Arn}/*"
              - Effect: Allow
                Action: 
                  - "ses:SendEmail"
                  - "ses:SendBulkEmail"
                Resource: '*'
  SenderLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "ses:SendEmail"
                  - "ses:SendBulkEmail"
                Resource: '*'
              - Effect: Allow
                Action: 
                  - "s3:GetObject"
                Resource: !Sub "${EmailTemplatesBucket.Arn}/*"
              - Effect: Allow
                Action: 
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt SenderQueue.Arn
  FeedReaderLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "s3:PutObject"
                Resource: !Sub "${EmailTemplatesBucket.Arn}/*"
              - Effect: Allow
                Action: 
                  - sqs:SendMessage
                Resource: !GetAtt SenderQueue.Arn
              - Effect: Allow # TODO check this statement scope
                Action: 
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt [SubscriptionsTable, Arn]
                  - !Sub "${SubscriptionsTable.Arn}/*"
                  - !GetAtt [ListsTable, Arn]
                  - !Sub "${ListsTable.Arn}/*"

  # Lambdas
  # Frontend
  FrontendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: go1.x
      Role: !GetAtt [FrontendLambdaRole, Arn]
      Handler: frontend
      Code: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactPath
      Description: Newsletter frontend.
      Environment:
        Variables:
          NEWSLETTER_LOG_LEVEL: debug
          NEWSLETTER_SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
          NEWSLETTER_LISTS_TABLE: !Ref ListsTable
  FrontendLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FrontendLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${NewsletterAPI}/*/*/*"
  # Bounce Handler
  BounceHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: go1.x
      Role: !GetAtt [FrontendLambdaRole, Arn] # TODO use own role
      Handler: bouncehandler
      Code: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactPath
      Description: Newsletter bounce handler.
      Environment:
        Variables:
          NEWSLETTER_LOG_LEVEL: debug
          NEWSLETTER_SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
  BounceHandlerLambdaSNSPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BounceHandlerLambda.Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref ComplaintsTopic
  # Sender
  SenderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: go1.x
      Role: !GetAtt [SenderLambdaRole, Arn]
      Handler: sender
      Code: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactPath
      Description: Newsletter frontend.
      Environment:
        Variables:
          NEWSLETTER_LOG_LEVEL: debug
  SenderLambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SenderQueue.Arn
      FunctionName: !GetAtt SenderLambda.Arn
  # FeedReader
  FeedReaderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: go1.x
      Role: !GetAtt [FeedReaderLambdaRole, Arn]
      Handler: feedreader
      Code: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactPath
      Description: Newsletter frontend.
      Environment:
        Variables:
          NEWSLETTER_LOG_LEVEL: debug
          NEWSLETTER_SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
          NEWSLETTER_LISTS_TABLE: !Ref ListsTable
          NEWSLETTER_TEMPLATE_BUCKET: !Ref EmailTemplatesBucket
          NEWSLETTER_SENDER_QUEUE_URL: !GetAtt SenderQueue.QueueUrl
  FeedReaderScheduledRule: 
    Type: AWS::Events::Rule
    Properties: 
      Description: "Feed reader schedule"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets: 
        - Arn: !GetAtt FeedReaderLambda.Arn
          Id: "TargetFunctionV1"
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties: 
      FunctionName: !Ref "FeedReaderLambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt FeedReaderScheduledRule.Arn
  # API Gateway
  NewsletterAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref Name
      Description: Backend API for newsletter management
  LambdaProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref NewsletterAPI
      ParentId: !GetAtt NewsletterAPI.RootResourceId
      PathPart: '{proxy+}'
  LambdaProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref NewsletterAPI
      ResourceId: !Ref LambdaProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FrontendLambda.Arn}/invocations
  LambdaProxyResourceANYRoot:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref NewsletterAPI
      ResourceId: !GetAtt NewsletterAPI.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FrontendLambda.Arn}/invocations
  NewsletterAPIDeployment:
    DependsOn: LambdaProxyResourceANY
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref NewsletterAPI
      Description: main
      StageName: main

  # DNS
  NewsletterDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateARN
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneID
      AliasTarget:
        DNSName: !GetAtt NewsletterDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt NewsletterDomain.DistributionHostedZoneId
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Ref NewsletterDomain
      RestApiId: !Ref NewsletterAPI
      Stage: main

  # SES Complaints Notifications
  # TODO automate SES configuration to use this topic
  ComplaintsTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !GetAtt BounceHandlerLambda.Arn
          Protocol: lambda
  ComplaintsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties: 
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: 
              - "sns:Publish"
            Principal: 
              Service: "ses.amazonaws.com"
            Resource:
              - !Ref ComplaintsTopic
            Condition:
              StringEquals:
                "AWS:SourceAccount": !Ref "AWS::AccountId"
                "AWS:SourceArn": !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${DomainName}"
      Topics: 
        - !Ref ComplaintsTopic

  # Email template objects
  EmailTemplatesBucket:
    Type: 'AWS::S3::Bucket'

  # Sender queue
  SenderQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      FifoQueue: true
      VisibilityTimeout: 901 # 15m1s
      RedrivePolicy: 
        deadLetterTargetArn: !GetAtt "SenderDeadLetterQueue.Arn"
        maxReceiveCount: 3
  SenderDeadLetterQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      FifoQueue: true

Outputs:
  NewsletterAPIID:
    Description: ID of the deployed API Gateway
    Value: !Ref NewsletterAPI
