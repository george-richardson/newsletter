AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ArtifactPath:
    Type: String
    Description: Path of lambda artifact in ArtifactBucket.
  ArtifactBucket:
    Type: String
    Description: Name of the S3 bucket which contains lambda artifacts.
  DomainName:
    Type: String
    Description: DNS name for use by the newsletter system.
  CertificateARN:
    Type: String
    Description: ARN of a certificate in us-east-1 to be used by API Gateway.
  HostedZoneID:
    Type: String
    Description: ID of the hosted zone to use for domain validation

Resources: 
  # DYNAMO
  SubscriptionsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "subscriptions"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: "email"
          AttributeType: "S"
        - AttributeName: "list"
          AttributeType: "S"
        - AttributeName: "verified"
          AttributeType: "S"
        - AttributeName: "verification_token"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "email"
          KeyType: "HASH"
        - AttributeName: "list"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        - IndexName: list-verified
          KeySchema:
          - AttributeName: "list"
            KeyType: "HASH"
          - AttributeName: "verified"
            KeyType: "RANGE"
          Projection:
            ProjectionType: KEYS_ONLY
        - IndexName: verification-token
          KeySchema: 
            - AttributeName: "verification_token"
              KeyType: "HASH"
          Projection:
            ProjectionType: KEYS_ONLY
  ListsTable: 
    Type: AWS::DynamoDB::Table
    Properties: 
      TableName: "lists"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions: 
        - AttributeName: "name"
          AttributeType: "S"
        - AttributeName: "domain"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "name"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        - IndexName: domain
          KeySchema:
          - AttributeName: "domain"
            KeyType: "HASH"
          Projection:
            ProjectionType: ALL

  # Lambda Role
  NewsletterLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt [SubscriptionsTable, Arn]
                  - !Sub "${SubscriptionsTable.Arn}/*"
                  - !GetAtt [ListsTable, Arn]
                  - !Sub "${ListsTable.Arn}/*"
              - Effect: Allow
                Action: 
                  - "ses:SendEmail"
                  - "ses:SendBulkEmail"
                Resource: '*'

  # Lambda
  NewsletterLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: go1.x
      Role: !GetAtt [NewsletterLambdaRole, Arn]
      Handler: newsletter
      Code: 
        S3Bucket: !Ref ArtifactBucket
        S3Key: !Ref ArtifactPath
      Description: Newsletter service handler.
      Environment:
        Variables:
          NEWSLETTER_LOG_LEVEL: debug
  NewsletterLambdaAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt NewsletterLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub "arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${NewsletterAPI}/*/*/*"

  # API Gateway
  NewsletterAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Backend API for newsletter management
      Name: NewsletterAPI
  LambdaProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref NewsletterAPI
      ParentId: !GetAtt NewsletterAPI.RootResourceId
      PathPart: '{proxy+}'
  LambdaProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref NewsletterAPI
      ResourceId: !Ref LambdaProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewsletterLambda.Arn}/invocations
  LambdaProxyResourceANYRoot:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref NewsletterAPI
      ResourceId: !GetAtt NewsletterAPI.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NewsletterLambda.Arn}/invocations
  NewsletterAPIDeployment:
    DependsOn: LambdaProxyResourceANY
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref NewsletterAPI
      Description: prod
      StageName: prod

  # DNS
  NewsletterDomain:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateARN
  Route53RecordSetGroup:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref DomainName
      Type: A
      HostedZoneId: !Ref HostedZoneID
      AliasTarget:
        DNSName: !GetAtt NewsletterDomain.DistributionDomainName
        EvaluateTargetHealth: false
        HostedZoneId: !GetAtt NewsletterDomain.DistributionHostedZoneId
  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties: 
      DomainName: !Ref NewsletterDomain
      RestApiId: !Ref NewsletterAPI
      Stage: prod

Outputs:
  NewsletterAPIID:
    Description: ID of the deployed API Gateway
    Value: !Ref NewsletterAPI
    Export:
      Name: NewsletterAPIID
